import {
  HttpException,
  HttpStatus,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
// import { UpdateUserDto } from './dto/update-user.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { User } from './entities/user.entity';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { randomBytes } from 'crypto';
import { MailService } from '@modules/mail/mail.service';

@Injectable()
export class UserService {
  constructor(
    @InjectRepository(User)
    private _userRepository: Repository<User>,
    private _mailService: MailService,
  ) {}
  async create(createUserDto: CreateUserDto) {
    try {
      const user = await this._userRepository.findOne({
        where: { username: createUserDto.username },
      });

      if (user) {
        throw new NotFoundException(`The Email is  already exist`);
      }

      const autoGeneratedPassword = randomBytes(8).toString('hex');
      const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

      const createdUser = this._userRepository.create(createUserDto);
      createdUser.password = hashedPassword;
      await this._mailService.sendMail(
        createUserDto.email, // Assuming username is the email
        'Welcome to Direna Health Support Platform!',
        `Hello ${createUserDto.username},\n\nYour account has been created successfully. Here are your credentials:\n\nUsername: ${createUserDto.email}\nPassword: ${autoGeneratedPassword}\n\nPlease change your password after logging in.`,
      );
      await this._userRepository.save(createdUser);

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { password, ...userCreated } = createdUser;
      return userCreated;
    } catch (error) {
      throw new HttpException(
        `Failed to create!:${error.message}`,
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  // findAll() {
  //   return `This action returns all user`;
  // }

  // findOne(id: number) {
  //   return `This action returns a #${id} user`;
  // }

  // update(id: number, updateUserDto: UpdateUserDto) {
  //   return `This action updates a #${id} user`;
  // }

  // remove(id: number) {
  //   return `This action removes a #${id} user`;
  // }
}
