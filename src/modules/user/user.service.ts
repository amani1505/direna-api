import {
  HttpException,
  HttpStatus,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { User } from './entities/user.entity';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { randomBytes } from 'crypto';
import { MailService } from '@modules/mail/mail.service';
import { Files } from '@modules/file/entities/file.entity';
import { readFileSync, unlinkSync, writeFileSync } from 'fs';

@Injectable()
export class UserService {
  constructor(
    @InjectRepository(User)
    private _userRepository: Repository<User>,
    @InjectRepository(Files)
    private _filesRepository: Repository<Files>,
    private _mailService: MailService,
  ) {}
  async create(createUserDto: CreateUserDto) {
    try {
      const existingUser = await this._userRepository.findOne({
        where: { email: createUserDto.email },
      });

      if (existingUser) {
        throw new HttpException(
          `The user with this email: ${createUserDto.email} have already exist!`,
          HttpStatus.CONFLICT,
        );
      }

      const { fullname, ...createUserData } = createUserDto;
      const username = await this.generateUniqueUsername();
      const autoGeneratedPassword = randomBytes(8).toString('hex');
      const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

      const createdUser = this._userRepository.create({
        username,
        ...createUserData,
      });
      createdUser.password = hashedPassword;

      await this._mailService.sendMail(
        createUserDto.email, // Assuming username is the email
        'Welcome to Direna Health Support Platform!',
        `Hello ${fullname},\n\nYour account has been created successfully. Here are your credentials:\n\nUsername: ${createUserDto.email}\nPassword: ${autoGeneratedPassword}\n\nPlease change your password after logging in.`,
      );
      await this._userRepository.save(createdUser);

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { password, ...userCreated } = createdUser;
      return userCreated;
    } catch (error) {
      throw new HttpException(`${error.message}`, HttpStatus.BAD_REQUEST);
    }
  }

  async generateUniqueUsername(): Promise<string> {
    let username: string;
    let isUsernameTaken = true;

    while (isUsernameTaken) {
      const randomSuffix = Math.floor(Math.random() * 1000); // 0-999
      username = `user${randomSuffix}`;

      const existingUser = await this._userRepository.findOne({
        where: { username },
      });
      isUsernameTaken = !!existingUser;
    }

    return username;
  }

  // findAll() {
  //   return `This action returns all user`;
  // }

  // findOne(id: number) {
  //   return `This action returns a #${id} user`;
  // }

  async update(id: string, updateUserDto: UpdateUserDto): Promise<User | any> {
    const user = await this._userRepository.findOne({ where: { id } });

    if (updateUserDto.username) {
      const existingUsername = await this._userRepository.findOne({
        where: { username: updateUserDto.username },
      });

      if (existingUsername) {
        throw new HttpException(
          `The username: ${updateUserDto.username} have already exist!`,
          HttpStatus.CONFLICT,
        );
      }
    }

    if (updateUserDto.email) {
      const existingEmail = await this._userRepository.findOne({
        where: { email: updateUserDto.email },
      });
      if (existingEmail) {
        throw new HttpException(
          `The email: ${updateUserDto.email} have already exist!`,
          HttpStatus.CONFLICT,
        );
      }
    }

    if (!user) {
      throw new NotFoundException(`user not found`);
    }

    if (updateUserDto.email) {
      user.email = updateUserDto.email;
    }
    if (updateUserDto.username) {
      user.username = updateUserDto.username;
    }

    await this._userRepository.save(user);

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { password, ...updateUserData } = user;

    return updateUserData;
  }

  async uploadUserAvatar(
    userId: string,
    file: Express.Multer.File,
  ): Promise<any> {
    try {
      const user = await this._userRepository.findOne({
        where: { id: userId },
      });

      if (!user) {
        throw new NotFoundException('User not found');
      }

      user.avatar = file.path;
      await this._userRepository.save(user);

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { password, ...userData } = user;

      return userData;
    } catch (error) {
      throw new HttpException(
        `Failed to upload avatar: ${error.message}`,
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  async updateUserAvatar(
    userId: string,
    file: Express.Multer.File,
  ): Promise<any> {
    try {
      const user = await this._userRepository.findOne({
        where: { id: userId },
      });

      if (!user) {
        throw new NotFoundException('User not found');
      }
      const oldPath = user.avatar;
      unlinkSync(oldPath);
      const newPath = file.path;
      const fileContent = readFileSync(file.path);

      writeFileSync(newPath, fileContent);

      user.avatar = newPath;
      await this._userRepository.save(user);
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { password, ...userData } = user;

      return userData;
    } catch (error) {
      throw new HttpException(
        `Failed to update avatar: ${error.message}`,
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  remove(id: number) {
    return `This action removes a #${id} user`;
  }
}
